import time
import requests
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TELEGRAM_TOKEN, CLORE_API_URL, CHECK_INTERVAL, API_TOKEN, API_HEADERS
import logging
from telegram.ext import MessageHandler, filters

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è
active_users = {}
sent_servers = {}
user_filters = {}
user_editing = {}  # {user_id: 'min_gpu' | 'max_price'}
user_efficiency = {}

# --- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã GPU –±–µ–∑ —Ä–∞–∑–≥–æ–Ω–∞
GPU_EFFICIENCY = {
    "3060": 0.85, "3060 ti": 0.83, "3070": 0.82, "3080": 0.80,
    "3090": 0.78, "4090": 0.82, "4070": 0.83, "4070 ti": 0.82,
    "4080": 0.81, "a5000": 0.81, "a4000": 0.84
}

# --- WhatToMine API


# --- –†–∞—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ (–±–µ–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏)
def calculate_server_info(user_id, srv):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å GPU –∏–∑ specs.gpu
    gpu_model = srv.get("specs", {}).get("gpu", "").replace("1x ", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU –∏–∑ –º–∞—Å—Å–∏–≤–∞
    gpu_count = len(srv.get("gpu_array", []))
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω–µ —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    price_data = srv.get("price", {})
    original_price = price_data.get("original_usd", {})
    price = float(original_price.get("on_demand", 0))  # –ë–µ—Ä–µ–º on-demand —Ü–µ–Ω—É
    
    return {
        "gpu_model": gpu_model,
        "gpu_count": gpu_count,
        "price": price
    }

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
def check_servers_for_user(user_id, app):
    servers = get_clore_servers()
    if not servers:
        return

    filters = user_filters.get(user_id, {"min_gpu": 1, "max_price": 9999})
    already_sent = sent_servers.get(user_id, set())

    for srv in servers:
         # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        if srv.get("rented", False):
            continue        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω–µ
        price_data = srv.get("price", {})
        original_price = price_data.get("original_usd", {})
        price = float(original_price.get("on_demand", 0))
        
        gpu_count = len(srv.get("gpu_array", []))

        if gpu_count < filters["min_gpu"] or price > filters["max_price"]:
            continue

        income, profit, coin = calculate_profit(user_id, srv)

        srv_id = srv.get("id")
        if srv_id in already_sent and profit <= 0:
            continue
        if srv_id in already_sent and profit > 0:
            already_sent.remove(srv_id)

        if profit > 0:
            msg = (
                f"üíª GPU: {srv.get('specs', {}).get('gpu')} x{gpu_count}\n"
                f"üí∞ –¶–µ–Ω–∞: ${price:.2f}\n"
                f"üìà –ú–æ–Ω–µ—Ç–∞: {coin}\n"
                f"üìä –î–æ—Ö–æ–¥: ${income:.2f}\n"
                f"‚úÖ –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}\n"
                f"üÜî ID: {srv_id}"
                f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {srv.get('owner')}\n"  # ‚Üê –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            )
            app.bot.send_message(chat_id=user_id, text=msg)
            already_sent.add(srv_id)

    sent_servers[user_id] = already_sent




# --- Clore API
def get_clore_servers():
    try:
        r = requests.get(CLORE_API_URL, headers=API_HEADERS, timeout=5)
        if r.status_code == 200:
            logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≤–µ—Ä–æ–≤ —Å Clore –ø–æ–ª—É—á–∏–ª {r.status_code}")
            return r.json().get("servers", [])
    except Exception as e:
        logging.warning(f"Clore error: {e}")
    return []


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
def check_servers_for_user(user_id, app):
    servers = get_clore_servers()
    if not servers:
        return

    filters = user_filters.get(user_id, {"min_gpu": 1, "max_price": 9999})
    already_sent = sent_servers.get(user_id, set())

    for srv in servers:
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω–µ
        price_data = srv.get("price", {})
        original_price = price_data.get("original_usd", {})
        price = float(original_price.get("on_demand", 0))
        
        gpu_count = len(srv.get("gpu_array", []))

        if gpu_count < filters["min_gpu"] or price > filters["max_price"]:
            continue

        income, profit, coin = calculate_profit(user_id, srv)

        srv_id = srv.get("id")
        if srv_id in already_sent and profit <= 0:
            continue
        if srv_id in already_sent and profit > 0:
            already_sent.remove(srv_id)

        if profit > 0:
            msg = (
                f"üíª GPU: {srv.get('specs', {}).get('gpu')} x{gpu_count}\n"
                f"üí∞ –¶–µ–Ω–∞: ${price:.2f}\n"
                f"üìà –ú–æ–Ω–µ—Ç–∞: {coin}\n"
                f"üìä –î–æ—Ö–æ–¥: ${income:.2f}\n"
                f"‚úÖ –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}\n"
                f"üÜî ID: {srv_id}"
            )
            app.bot.send_message(chat_id=user_id, text=msg)
            already_sent.add(srv_id)

    sent_servers[user_id] = already_sent

def auto_check(user_id, app):
    while active_users.get(user_id, False):
        check_servers_for_user(user_id, app)
        time.sleep(CHECK_INTERVAL)
        
        


# --- Telegram handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")  # ‚Üê –õ–æ–≥
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Clore.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/filters ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/check_servers ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å\n"  # ‚Üê –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        "/start_check ‚Äî –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É\n"
        "/stop_check ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
    )
    if update.message:
        await update.message.reply_text(text)

async def set_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
    [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω. GPU", callback_data="filter_min_gpu")],
    [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å. —Ü–µ–Ω—É", callback_data="filter_max_price")]
]
    if update.message:
        await update.message.reply_text("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.message.chat_id
    
    
    
    if query.data == "filter_min_gpu":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU:")
        user_editing[user_id] = 'min_gpu'
    elif query.data == "filter_max_price":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:")
        user_editing[user_id] = 'max_price'
        
    await query.edit_message_text(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {f}")
    
    
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if user_id in user_editing:
        try:
            value = float(update.message.text)
            filter_type = user_editing[user_id]
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            user_filters.setdefault(user_id, {"min_gpu": 1, "max_price": 9999})
            
            if filter_type == 'min_gpu':
                user_filters[user_id]['min_gpu'] = max(1, int(value))
            elif filter_type == 'max_price':
                user_filters[user_id]['max_price'] = max(0.01, value)

            await update.message.reply_text(f"‚úÖ –§–∏–ª—å—Ç—Ä '{filter_type}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {value}")
            del user_editing[user_id]
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")




async def start_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat:
        user_id = update.effective_chat.id
        if active_users.get(user_id):
            if update.message:
                await update.message.reply_text("‚è≥ –£–∂–µ –ø—Ä–æ–≤–µ—Ä—è—é...")
                return
    active_users[user_id] = True
    # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç `app`, –∞ –Ω–µ `context.application`
    threading.Thread(target=auto_check, args=(user_id, context.application), daemon=True).start()
    if update.message:
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")




async def stop_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat:
        user_id = update.effective_chat.id
        active_users[user_id] = False
        if update.message:
            await update.message.reply_text("‚è∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    
# --- –ö–æ–º–∞–Ω–¥–∞ /check_servers
async def check_servers_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat:
        user_id = update.effective_chat.id
        filters = user_filters.get(user_id, {"min_gpu": 1, "max_price": 9999})

    servers = get_clore_servers()
    if not servers:
        if update.message:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
            return

    result = []
    for srv in servers:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        if srv.get("rented", False):
            continue

        price_data = srv.get("price", {})
        original_price = price_data.get("original_usd", {})
        price = float(original_price.get("on_demand", 0))
        gpu_count = len(srv.get("gpu_array", []))

        if gpu_count < filters["min_gpu"] or price > filters["max_price"]:
            continue

        server_info = calculate_server_info(user_id, srv)
        
        result.append(
            f"üíª GPU: {srv.get('specs', {}).get('gpu')} x{server_info['gpu_count']}\n"
            f"üí∞ –¶–µ–Ω–∞: ${server_info['price']:.2f}\n"
            f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {srv.get('owner')}\n"  # ‚Üê –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            f"üÜî ID: {srv.get('id')}\n"
        )

    if result:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 —Å–µ—Ä–≤–µ—Ä–æ–≤
        for i in range(0, len(result), 20):
            chunk = result[i:i+20]
            message = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n" + "\n".join(chunk)
            try:
                await update.message.reply_text(message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
    else:
        if update.message:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
def main():
    # --- –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # --- –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("filters", set_filters))
    app.add_handler(CommandHandler("start_check", start_check))
    app.add_handler(CommandHandler("stop_check", stop_check))
    app.add_handler(CommandHandler("check_servers", check_servers_now))
    app.add_handler(CallbackQueryHandler(button))
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))  # ‚Üê –ü–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ app

    # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
    app.run_polling()

if __name__ == "__main__":
    main()
