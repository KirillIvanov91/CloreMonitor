import time
import requests
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TELEGRAM_TOKEN, CLORE_API_URL, CHECK_INTERVAL, API_TOKEN, API_HEADERS
import logging

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è
active_users = {}
sent_servers = {}
user_filters = {}
user_efficiency = {}

# --- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã GPU –±–µ–∑ —Ä–∞–∑–≥–æ–Ω–∞
GPU_EFFICIENCY = {
    "3060": 0.85, "3060 ti": 0.83, "3070": 0.82, "3080": 0.80,
    "3090": 0.78, "4090": 0.82, "4070": 0.83, "4070 ti": 0.82,
    "4080": 0.81, "a5000": 0.81, "a4000": 0.84
}

# --- WhatToMine API
def get_whattomine_data():
    try:
        r = requests.get("https://whattomine.com/coins.json", timeout=5)
        
        if r.status_code == 200:
            return r.json().get("coins", {})
    except Exception as e:
        logging.warning(f"WhatToMine error: {e}")
    return {}
def get_best_coin_for_gpu(gpu_model):
    coins = get_whattomine_data()
    if not coins:
        return {"coin": "Unknown", "profit": 0.0}

    best = max(coins.values(), key=lambda x: x.get("profit", 0))
    return {"coin": best["tag"], "profit": best["profit"]}

def get_gpu_efficiency(gpu_model, user_id):
    if user_id in user_efficiency:
        return user_efficiency[user_id]
    model = gpu_model.lower()
    for key in GPU_EFFICIENCY:
        if key in model:
            return GPU_EFFICIENCY[key]
    return 0.8

# --- Clore API
def get_clore_servers():
    try:
        r = requests.get(CLORE_API_URL, headers=API_HEADERS, timeout=5)
        if r.status_code == 200:
            logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≤–µ—Ä–æ–≤ —Å Clore –ø–æ–ª—É—á–∏–ª {r.status_code}")
            return r.json().get("result", [])
    except Exception as e:
        logging.warning(f"Clore error: {e}")
    return []

# --- –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
def calculate_profit(user_id, srv):
    gpu_model = srv.get("gpu", "")
    gpu_count = srv.get("gpu_count", 1)
    price = float(srv.get("price", 0))

    best_coin = get_best_coin_for_gpu(gpu_model)
    eff = get_gpu_efficiency(gpu_model, user_id)
    income = best_coin["profit"] * gpu_count * eff
    profit = income - price
    return income, profit, best_coin["coin"]

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
def check_servers_for_user(user_id, app):
    servers = get_clore_servers()
    if not servers:
        return

    filters = user_filters.get(user_id, {"min_gpu": 1, "max_price": 9999})
    already_sent = sent_servers.get(user_id, set())

    for srv in servers:
        gpu_count = srv.get("gpu_count", 1)
        price = float(srv.get("price", 0))

        if gpu_count < filters["min_gpu"] or price > filters["max_price"]:
            continue

        income, profit, coin = calculate_profit(user_id, srv)

        srv_id = srv.get("id")
        if srv_id in already_sent and profit <= 0:
            continue
        if srv_id in already_sent and profit > 0:
            already_sent.remove(srv_id)

        if profit > 0:
            msg = (
                f"üíª GPU: {srv.get('gpu')} x{gpu_count}\n"
                f"üí∞ –¶–µ–Ω–∞: ${price:.2f}\n"
                f"üìà –ú–æ–Ω–µ—Ç–∞: {coin}\n"
                f"üìä –î–æ—Ö–æ–¥: ${income:.2f}\n"
                f"‚úÖ –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}\n"
                f"üÜî ID: {srv_id}"
            )
            app.bot.send_message(chat_id=user_id, text=msg)
            already_sent.add(srv_id)

    sent_servers[user_id] = already_sent

def auto_check(user_id, app):
    while active_users.get(user_id, False):
        check_servers_for_user(user_id, app)
        time.sleep(CHECK_INTERVAL)
        
        


# --- Telegram handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")  # ‚Üê –õ–æ–≥
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Clore.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/filters ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/check_servers ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å\n"  # ‚Üê –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        "/start_check ‚Äî –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É\n"
        "/stop_check ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
    )
    await update.message.reply_text(text)

async def filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ú–∏–Ω. 10 GPU", callback_data="filter_min_gpu_10")],
        [InlineKeyboardButton("–¶–µ–Ω–∞ < $5", callback_data="filter_max_price_5")]
    ]
    await update.message.reply_text("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.message.chat_id
    f = user_filters.get(user_id, {"min_gpu": 1, "max_price": 9999})
    if query.data == "filter_min_gpu_10":
        f["min_gpu"] = 10
    if query.data == "filter_max_price_5":
        f["max_price"] = 5
    user_filters[user_id] = f
    await query.edit_message_text(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {f}")

async def start_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    if active_users.get(user_id):
        await update.message.reply_text("‚è≥ –£–∂–µ –ø—Ä–æ–≤–µ—Ä—è—é...")
        return
    active_users[user_id] = True
    # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç `app`, –∞ –Ω–µ `context.application`
    threading.Thread(target=auto_check, args=(user_id, context.application), daemon=True).start()
    await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

async def stop_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    active_users[user_id] = False
    await update.message.reply_text("‚è∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    
async def check_servers_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    filters = user_filters.get(user_id, {"min_gpu": 1, "max_price": 9999})
    already_sent = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    servers = get_clore_servers()
    if not servers:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return

    result = []
    for srv in servers:
        gpu_count = srv.get("gpu_count", 1)
        price = float(srv.get("price", 0))

        if gpu_count < filters["min_gpu"] or price > filters["max_price"]:
            continue

        income, profit, coin = calculate_profit(user_id, srv)
        if profit <= 0:
            continue

        result.append(
            f"üíª GPU: {srv.get('gpu')} x{gpu_count}\n"
            f"üí∞ –¶–µ–Ω–∞: ${price:.2f}\n"
            f"üìà –ú–æ–Ω–µ—Ç–∞: {coin}\n"
            f"üìä –î–æ—Ö–æ–¥: ${income:.2f}\n"
            f"‚úÖ –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}\n"
            f"üÜî ID: {srv.get('id')}\n"
        )

    if result:
        await update.message.reply_text("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n" + "\n".join(result))
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ApplicationBuilder
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("filters", filters))
    app.add_handler(CommandHandler("start_check", start_check))
    app.add_handler(CommandHandler("stop_check", stop_check))
    app.add_handler(CommandHandler("check_servers", check_servers_now))  # ‚Üê –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    app.add_handler(CallbackQueryHandler(button))
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å Telegram API
    app.run_polling()

if __name__ == "__main__":
    main()
