import time
import requests
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TELEGRAM_TOKEN, CLORE_API_URL, CHECK_INTERVAL, API_TOKEN, API_HEADERS
import logging
import asyncio
from tenacity import retry, stop_after_attempt, wait_exponential

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è
active_users = {}
sent_servers = {}
user_filters = {}
user_efficiency = {}

# --- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã GPU –±–µ–∑ —Ä–∞–∑–≥–æ–Ω–∞
GPU_EFFICIENCY = {
    "3060": 0.85, "3060 ti": 0.83, "3070": 0.82, "3080": 0.80,
    "3090": 0.78, "4090": 0.82, "4070": 0.83, "4070 ti": 0.82,
    "4080": 0.81, "a5000": 0.81, "a4000": 0.84
}



# --- Clore API
def get_clore_servers():
    
    
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
    def _request():
        try:
            r = requests.get(
                CLORE_API_URL,
                headers=API_HEADERS,
                timeout=10  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            )
            r.raise_for_status()
            logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Clore: {r.status_code}")
            return r.json().get("servers", [])
        except Exception as e:
            logging.warning(f"Clore error: {e}")
            return []

    return _request()






# --- Telegram handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")  # ‚Üê –õ–æ–≥
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Clore.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/filters ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/check_servers ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å\n"  # ‚Üê –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        "/start_check ‚Äî –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É\n"
        "/stop_check ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
    )
    if update.message:
        await update.message.reply_text(text)

async def filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ú–∏–Ω. 10 GPU", callback_data="filter_min_gpu_10")],
        [InlineKeyboardButton("–¶–µ–Ω–∞ < $5", callback_data="filter_max_price_5")]
    ]
    if update.message:
        await update.message.reply_text("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    await query.answer()
    user_id = query.message.chat_id
    f = user_filters.get(user_id, {"min_gpu": 1, "max_price": 9999})
    
    if query.data == "filter_min_gpu_10":
        f["min_gpu"] = 10
    if query.data == "filter_max_price_5":
        f["max_price"] = 5
    user_filters[user_id] = f
    await query.edit_message_text(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {f}")



    
# --- –ö–æ–º–∞–Ω–¥–∞ /check_servers
async def check_servers_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat:
        user_id = update.effective_chat.id
        filters = user_filters.get(user_id, {"min_gpu": 1, "max_price": 9999})

    servers = get_clore_servers()
    if not servers:
        if update.message:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
            return

    result = []
    for srv in servers:
        price_data = srv.get("price", {})
        original_price = price_data.get("original_usd", {})
        price = float(original_price.get("on_demand", 0))
        gpu_count = len(srv.get("gpu_array", []))

        if gpu_count < filters["min_gpu"] or price > filters["max_price"]:
            continue

       

        result.append(
            f"üíª GPU: {srv.get('specs', {}).get('gpu')} x{gpu_count}\n"
            f"üí∞ –¶–µ–Ω–∞: ${price:.2f}\n"
            f"üÜî ID: {srv.get('id')}\n"
        )

    if result:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 —Å–µ—Ä–≤–µ—Ä–æ–≤
        for i in range(0, len(result), 20):
            chunk = result[i:i+20]
            message = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n" + "\n".join(chunk)
            try:
                await update.message.reply_text(message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
    else:
        if update.message:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")





            
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ApplicationBuilder
    app = (
        ApplicationBuilder()
        .token(TELEGRAM_TOKEN)
        .connect_timeout(60)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        .read_timeout(60)     # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
        .build()
    )





    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("filters", filters))
    app.add_handler(CommandHandler("check_servers", check_servers_now))
    app.add_handler(CallbackQueryHandler(button))
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å Telegram API




    
    app.run_polling()
    

if __name__ == "__main__":
    main()
